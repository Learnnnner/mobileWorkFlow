package form;

import database.DataAccess;
import io.vertx.core.Future;
import io.vertx.core.Vertx;
import io.vertx.core.json.Json;
import io.vertx.core.json.JsonArray;
import io.vertx.core.json.JsonObject;
import io.vertx.ext.sql.ResultSet;
import io.vertx.ext.sql.SQLConnection;
import io.vertx.ext.sql.SQLOptions;
import io.vertx.ext.sql.UpdateResult;
import io.vertx.ext.web.RoutingContext;
import io.vertx.ext.web.Session;
import tool.ConvertTool;
import tool.StringTool;

import java.util.List;

public class SaveFormData {
    public static void save(RoutingContext routingContext, Vertx vertx) {
        JsonObject jsonObject = routingContext.getBodyAsJson();
        Session session = routingContext.session();
        String userId = session.get("userId");
        String dataSet = jsonObject.getString("data");
        JsonObject dataSetJson = new JsonObject(dataSet);
        String timeStamp = ConvertTool.toString(jsonObject.getLong("timeStamp"));
        String templateId = jsonObject.getString("templateId");

        JsonArray param = new JsonArray()
                .add(dataSet)
                .add(userId)
                .add(timeStamp);

        Future<SQLConnection> connfuture = Future.future();
        Future<ResultSet> queryStatusFuture = Future.future();
        if(!StringTool.isEmpty(userId)) {

            JsonArray queryParam = new JsonArray();
            queryParam.add(templateId);

            DataAccess dataAccess = DataAccess.create(vertx);
            dataAccess.getJDBCClient().getConnection(connfuture);

            String queryTemplate = "Select * from form_templates where id = ?";

            queryStatusFuture.setHandler(asyncResult -> {
                if(asyncResult.succeeded()) {
                    final SQLConnection connection = connfuture.result();
                    String statusNow = "";
                    String statusFinal = "";
                    ResultSet rs = asyncResult.result();
                    List<JsonArray> data = rs.getResults();
                    String str = data.get(0).getString(6);
                    JsonObject workflow = new JsonObject(str);
                    JsonArray node = workflow.getJsonObject("填写表单").getJsonArray("data");
                    for(int i = 0; i < node.size(); ++ i) {
                        JsonObject wfCondition = node.getJsonObject(i);
                        JsonObject jsonValue = new JsonObject(dataSet);
                        JsonArray keywords = wfCondition.getJsonArray("keywords");
                        JsonArray rules = wfCondition.getJsonArray("rule");
                        JsonArray values = wfCondition.getJsonArray("value");
                        int flag = 0;
                        for (int j = 0; j < keywords.size(); ++ j, ++ flag) {
                            String keyword = keywords.getString(j);
                            if(keyword.equals("默认")) {
                                statusNow = wfCondition.getString("nextNode");
                                if(!statusNow.equals("")) {
                                    statusFinal = "审批中";
                                }else {
                                    statusFinal = "审批完";
                                }

                                JsonArray dealer = workflow.getJsonObject(statusNow).getJsonArray("dealer");

                                String InsertData = "Insert into form_data(data_set, status_now, status_final, time_stamp, dealer) values (?, ?, ?, ?, ?)";
                                String InsertRelation = "Insert into template_data_user_relation (templateId, dataId, userId) values (?, ?, ?)";
                                JsonArray InsertDataParam = new JsonArray()
                                        .add(dataSet)
                                        .add(statusNow)
                                        .add(statusFinal)
                                        .add(timeStamp)
                                        .add(dealer.toString());

                                connection.setOptions(new SQLOptions().setAutoGeneratedKeys(true));
                                connection.setAutoCommit(false, result -> {
                                    if(result.succeeded()) {
                                        Future<UpdateResult> fut1 = Future.future();
                                        Future<UpdateResult> fut2 = Future.future();
                                        connection.updateWithParams(InsertData, InsertDataParam, fut1);
                                        fut1.compose(key -> {
                                            String dataId = ConvertTool.toString(key.getKeys().getLong(0));
                                            JsonArray InsertRelationParam = new JsonArray()
                                                    .add(templateId)
                                                    .add(dataId)
                                                    .add(userId);
                                            connection.updateWithParams(InsertRelation, InsertRelationParam, fut2);
                                            return fut2;
                                        }).setHandler((f2) -> {
                                            if(f2.failed()) {
                                                connection.rollback(roll -> {
                                                    if (roll.succeeded()) {
                                                        jsonObject.clear().put("status", 500);
                                                        routingContext.response().setStatusCode(500).end("rollback ok");
                                                        connection.close();
                                                    } else {
                                                        routingContext.response().setStatusCode(500).end("rollback error");
                                                        connection.close();
                                                    }
                                                });
                                            } else {
                                                connection.commit(commit -> {
                                                    if (commit.succeeded()) {
                                                        jsonObject.clear().put("status", 200);
                                                        routingContext.response().setStatusCode(200).end(Json.encodePrettily(jsonObject));
                                                        connection.close();
                                                    } else {
                                                        routingContext.response().end("commit error");
                                                        connection.close();
                                                    }
                                                });
                                            }
                                        });
                                    }
                                });
                                return;
                            } else {
                                String value = values.getString(j);
                                String rule = rules.getString(j);
                                if(rule.equals("等于")) {
                                    String userValue = dataSetJson.getJsonArray(keyword).getString(0);
                                    if(value.equals(userValue)) {
                                        continue;
                                    }else {
                                        break;
                                    }
                                }else if(rule.equals("早于") || rule.equals("小于")) {
                                    String userValue = dataSetJson.getJsonArray(keyword).getString(0);
                                    if(ConvertTool.toInt(value) > ConvertTool.toInt(userValue)) {
                                        continue;
                                    }else {
                                        break;
                                    }
                                } else if(rule.equals("晚于") || rule.equals("大于")) {
                                    String userValue = dataSetJson.getJsonArray(keyword).getString(0);
                                    if(ConvertTool.toInt(value) < ConvertTool.toInt(userValue)) {
                                        continue;
                                    } else {
                                        break;
                                    }
                                } else if(rule.equals("包含") || rule.equals("不包含")) {
                                    String userValue = dataSetJson.getJsonArray(keyword).getString(0);
                                    if(userValue.indexOf(value) >= 0) {
                                        continue;
                                    } else {
                                        break;
                                    }
                                }
                            }
                        }

                        if(flag == keywords.size()) {
                            statusNow = wfCondition.getString("nextNode");
                            JsonArray dealer = workflow.getJsonObject(statusNow).getJsonArray("dealer");
                            if(!statusNow.equals("")) {
                                statusFinal = "审批中";
                            }else {
                                statusFinal = "审批完";
                            }
                            String InsertData = "Insert into form_data(data_set, status_now, status_final, time_stamp, dealer) values (?, ?, ?, ?, ?)";
                            String InsertRelation = "Insert into template_data_user_relation(templateId, dataId, userId) values (?, ?, ?)";
                            JsonArray InsertDataParam = new JsonArray()
                                    .add(dataSet)
                                    .add(statusNow)
                                    .add(statusFinal)
                                    .add(timeStamp)
                                    .add(dealer.toString());

                            connection.setOptions(new SQLOptions().setAutoGeneratedKeys(true));
                            connection.setAutoCommit(false, result -> {
                                if(result.succeeded()) {
                                    System.out.println(connection);
                                    Future<UpdateResult> fut1 = Future.future();
                                    Future<UpdateResult> fut2 = Future.future();
//                                    connection.updateWithParams(InsertData, InsertDataParam, res-> {
//                                        if(res.succeeded()) {
//                                            System.out.println(res);
//                                        }
//                                    });
                                    connection.updateWithParams(InsertData, InsertDataParam, fut1);
                                    fut1.compose(key -> {
                                        String dataId = ConvertTool.toString(key.getKeys().getLong(0));
                                        JsonArray InsertRelationParam = new JsonArray()
                                                .add(templateId)
                                                .add(dataId)
                                                .add(userId);
                                        connection.updateWithParams(InsertRelation, InsertRelationParam, fut2);
                                        return fut2;
                                    }).setHandler((f2) -> {
                                        if(f2.failed()) {
                                            connection.rollback(roll -> {
                                                if (roll.succeeded()) {
                                                    jsonObject.clear().put("status", 500);
                                                    routingContext.response().setStatusCode(500).end("rollback ok");
                                                    connection.close();
                                                } else {
                                                    routingContext.response().setStatusCode(500).end("rollback error");
                                                    connection.close();
                                                }
                                            });
                                        } else {
                                            connection.commit(commit -> {
                                                if (commit.succeeded()) {
                                                    jsonObject.clear().put("status", 200);
                                                    routingContext.response().setStatusCode(200).end(Json.encodePrettily(jsonObject));
                                                    connection.close();
                                                } else {
                                                    routingContext.response().end(Json.encodePrettily(jsonObject));
                                                    connection.close();
                                                }
                                            });
                                        }
                                    });
                                }
                            });
                        }
                    }
                } else {
                    asyncResult.cause().printStackTrace();
                    jsonObject.put("status", 500);
                    jsonObject.put("message", "数据库操作异常");
                    routingContext.response().setStatusCode(500).end(Json.encodePrettily(jsonObject));
                    connfuture.result().close();
                }
//                connfuture.result().close();

            });

            connfuture.setHandler(asyncResult -> {
                if(asyncResult.succeeded()) {
                    asyncResult.result().queryWithParams(queryTemplate, queryParam, queryStatusFuture);
                } else {
                    asyncResult.cause().printStackTrace();
                }
            });
        }
    }
}
